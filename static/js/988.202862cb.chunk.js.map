{"version":3,"file":"static/js/988.202862cb.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/Layout/Layout.module.css?3701","components/Layout/Layout.js","components/GlobalStyle.js","components/ContactForm/ContactFormik.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","page/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport {Form as FormikForm, ErrorMessage as FormikError} from 'formik'\n\nexport const FormContact = styled.form`\n    width: 350px;\n    padding: 10px;\n    border: 1px solid black;\n    \n`;\nexport const Label = styled.label`\n    display: block;\n    margin: 0px 0px 20px 0px;\n    \n`;\n\nexport const Form = styled(FormikForm)`\n    width: 350px;\n    padding: 10px;\n    border: 1px solid black;\n`\n\nexport const ErrorMessage = styled(FormikError)`\n    display: block;\n    color: tomato;\n`","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getValueFilter = state => state.filter;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Layout_container__dVyML\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n    return <main className={css.container}>{children}</main>;\n  };\n  ","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize'\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n  p {\n    margin: 0;\n  }\n  \n  button {\n    padding: 2px 10px;\n    background-color: white;\n    border-radius: 6px;\n    border: 1px solid #d5d3d3;\n    font-size: 10px;\n\n    :hover {\n        box-shadow: 0 4px 2px -2px gray;\n    }\n    :active {\n        border: 1px solid transparent;\n        background-color: blue;\n        color: white;\n    }\n  }\n\n  input {\n    border: 1px solid #d5d3d3;\n\n    :focus {\n      box-shadow: 0px 0px 2px 2px #5ca5f9;;\n      outline-width: 0px;\n    }\n  }\n`;\n\n \n","import React  from \"react\";\nimport { Label, Form, ErrorMessage } from \"./ContactForm.styled\";\nimport { Field, Formik, } from \"formik\";\nimport * as Yup from 'yup';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"redux/contacts/operations\"; \nimport { getContacts } from \"redux/contacts/selectors\";\n\nconst ContactSchema = Yup.object().shape({\n    name: Yup.string().min(2, 'Too Short!').max(20, 'Too Long!').matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/ , 'Перейди на англійську').required('Required'),\n    number: Yup.string().min(10, 'Too Short!').max(15, 'Too Long!').matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/ , 'Невірний формат').required('Required'),  \n  });\n\n\nconst isNameInContacts = (name, contacts) => {\n    const contactsName = contacts.map(contact => contact.name.toLowerCase());\n    return contactsName.includes(name.toLowerCase());\n  }\n\nexport const ContactFormik = () => {\n    const contacts = useSelector(getContacts)\n    const dispatch = useDispatch();\n    const handlerSubmitForm = (newContact) => {\n        if(isNameInContacts(newContact.name, contacts)) {\n            return alert(`${newContact.name} is already in contacts`)\n        }\n       dispatch(addContact(newContact));\n    }\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                number: ''\n            }}\n            validationSchema={ContactSchema}\n            onSubmit={(values, actions) => {\n                handlerSubmitForm(values);\n                actions.resetForm();\n            }}\n            >\n            <Form >\n                <Label>\n                    <p> Name </p> \n                    <Field\n                    placeholder=\"Jane Doe\"\n                    type=\"text\"\n                    name=\"name\"\n                    />\n                    <ErrorMessage name=\"name\" component='span'/>\n                </Label>\n                    \n                <Label>\n                    <p> Number </p>\n                    <Field\n                    placeholder=\"000-000-00-00\"\n                    type=\"tel\"\n                    name=\"number\"\n                    />\n                    <ErrorMessage name=\"number\" component='span'/>\n                </Label>\n                \n                <button type=\"submit\">Add contact</button>\n            </Form>\n        </Formik>\n    )\n}\n\n","import styled from \"styled-components\";\n\nexport const Item = styled.li`\n    margin-bottom: 10px;\n\n    button {\n        margin-left: 10px;\n    }\n`;\nexport const SpanNumber = styled.span`\n    margin-left: 5px;\n`;","import React from \"react\";\nimport { Item, SpanNumber } from \"./ContactList.styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { getContacts, getValueFilter } from \"redux/contacts/selectors\"\n\n\n\nconst getVisibleContacts = (contacts, valueFilter = '') => {\n    if(!valueFilter) {\n        return contacts;\n      }\n      return contacts.filter(contact => contact.name.toLowerCase().includes(valueFilter));\n    }\n\nconst ContactList = () => {\n    // Отримуємо масив завдань із стану Redux\n    const contacts = useSelector(getContacts);\n    // Отримуємо значення фільтра із стану Redux\n    const valueFilter = useSelector(getValueFilter);\n    // Обчислюємо масив завдань, які необхідно відображати в інтерфейсі\n    const visibleContacts = getVisibleContacts(contacts, valueFilter);\n    const dispatch = useDispatch(); \n    const handleDeleteContact = (id) => { dispatch(deleteContact(id) );\n    }\n    return (\n      <ul>\n        {visibleContacts.map(({id, name, number}) => (\n          <Item key={id}>\n            <span> { name } : </span>\n                <SpanNumber> { number } </SpanNumber> \n                <button onClick={()=> handleDeleteContact(id) }>Delete</button>\n            </Item>\n        ))}\n      </ul>\n    );\n  };\n\n\nexport default ContactList;\n\n","import styled from \"styled-components\";\n\nexport const FilterLabel = styled.label`\n    \n    input {\n        height: 22px;\n        font-size: 12px;\n        margin-top: 5px;\n        width: 150px;\n    }\n`","import React from \"react\";\nimport {FilterLabel} from \"./Filter.styled\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setValueFilter } from \"redux/contacts/filterSlice\";\nimport { getValueFilter } from \"redux/contacts/selectors\"\n\n\n\n\nconst Filter = () =>  {    \n    const dispatch = useDispatch(); \n    const handlerFilterChanch = (evt) => { \n        const value = evt.target.value.toLowerCase();\n        dispatch(setValueFilter(value));\n    };\n    const valueFilter = useSelector(getValueFilter);\n    \n    return (\n    \n        <FilterLabel>\n            <p>Find contacts by name</p>\n            <input\n                type=\"text\"\n                name=\"filter\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Find contacts by name\"\n                required\n                value={valueFilter}\n                onChange={handlerFilterChanch}\n            />\n        </FilterLabel>\n    )\n}\n\nexport default Filter;\n","\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { getError, getIsLoading } from \"redux/contacts/selectors\";\nimport { Layout } from \"components/Layout/Layout\";\nimport { GlobalStyle } from \"components/GlobalStyle\"\nimport { ContactFormik } from \"components/ContactForm/ContactFormik\";\nimport ContactList  from \"components/ContactList/ContactList\" ;\nimport Filter from \"components/Filter/Filter\"\n    \n    \nexport default function Contacts () { \n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Layout>\n            <h1> PhoneBook </h1>\n            <ContactFormik />\n            <h2> Contacts </h2>\n            <Filter  />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList />\n            <GlobalStyle/>\n        </Layout>\n    );\n}\n"],"names":["Label","styled","Form","FormikForm","ErrorMessage","FormikError","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getValueFilter","filter","Layout","children","className","css","GlobalStyle","createGlobalStyle","ContactSchema","Yup","shape","name","min","max","matches","required","number","ContactFormik","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","newContact","map","contact","toLowerCase","includes","isNameInContacts","alert","addContact","handlerSubmitForm","resetForm","placeholder","type","component","Item","SpanNumber","visibleContacts","valueFilter","getVisibleContacts","id","onClick","deleteContact","handleDeleteContact","FilterLabel","pattern","title","value","onChange","evt","target","setValueFilter","Contacts","useEffect","fetchContacts"],"sourceRoot":""}